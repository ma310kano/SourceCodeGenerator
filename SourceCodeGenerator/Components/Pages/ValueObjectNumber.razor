@page "/value-object-number"
@using SourceCodeGeneration.Application
@using SourceCodeGeneration.Application.Command
@inject IValueObjectGenerationService ValueObjectGenerationService

<h1>Value object (number)</h1>

<EditForm Model="_model" OnValidSubmit="SaveFileAsync">
	<div class="mb-3">
		<label class="form-label" for="class-name">Class name</label>
		<InputText class="form-control" id="class-name" @bind-Value="_model.ClassName" />
	</div>
	<div class="mb-3">
		<label class="form-label" for="class-description">Class description</label>
		<InputText class="form-control" id="class-description" @bind-Value="_model.ClassDescription" />
	</div>
	<div class="mb-3">
		<label class="form-label" for="namespace-sequence">Namespace sequence</label>
		<InputText class="form-control" id="namespace-sequence" @bind-Value="_model.NamespaceSequence" />
	</div>
	<div class="mb-3">
		<InputCheckbox class="form-check-input" id="minimum-number" @bind-Value="_model.HasMinimumNumber" />
		<label class="form-label" for="minimum-number">Minumum number</label>
		<InputNumber class="form-control" disabled="@(_model.HasMinimumNumber ? null : "disabled")" @bind-Value="_model.MinimumNumber" />
	</div>
	<div class="mb-3">
		<InputCheckbox class="form-check-input" id="maximum-number" @bind-Value="_model.HasMaximumNumber" />
		<label class="form-label" for="maximum-number">Maximum number</label>
		<InputNumber class="form-control" disabled="@(_model.HasMaximumNumber ? null : "disabled")" @bind-Value="_model.MaximumNumber" />
	</div>
	<div>
		<button type="submit" class="btn btn-primary">Save</button>
	</div>
</EditForm>

@code {
	#region Fields

	/// <summary>
	/// モデル
	/// </summary>
	private readonly Model _model = new();

	#endregion

	#region Methods

	/// <summary>
	/// ファイルを保存します。
	/// </summary>
	/// <returns>非同期操作を返します。</returns>
	private async Task SaveFileAsync()
	{
		ValueObjectNumberGenerationCommand command = _model.CreateCommand();

		using Stream stream = await ValueObjectGenerationService.GenerateValueObjectAsync(command);

		string fileName = command.ClassName + ".cs";

		await FileSaver.Default.SaveAsync(fileName, stream);
	}

	#endregion

	#region Nested types

	/// <summary>
	/// モデル
	/// </summary>
	private class Model
	{
		#region Properties

		/// <summary>
		/// クラス名を設定または取得します。
		/// </summary>
		public string ClassName { get; set; } = string.Empty;

		/// <summary>
		/// クラスの説明を設定または取得します。
		/// </summary>
		public string ClassDescription { get; set; } = string.Empty;

		/// <summary>
		/// 名前空間シーケンスを設定または取得します。
		/// </summary>
		public string NamespaceSequence { get; set; } = string.Empty;

		/// <summary>
		/// 最小数を持つかどうかを設定または取得します。
		/// </summary>
		public bool HasMinimumNumber { get; set; } = true;

		/// <summary>
		/// 最小数を設定または取得します。
		/// </summary>
		public int MinimumNumber { get; set; } = 0;

		/// <summary>
		/// 最大数を持つかどうかを設定または取得します。
		/// </summary>
		public bool HasMaximumNumber { get; set; } = true;

		/// <summary>
		/// 最大数を設定または取得します。
		/// </summary>
		public int MaximumNumber { get; set; } = 999_999_999;

		#endregion

		#region Methods

		/// <summary>
		/// コマンドを作成します。
		/// </summary>
		/// <returns>作成したコマンドを返します。</returns>
		public ValueObjectNumberGenerationCommand CreateCommand()
		{
			ValueObjectNumberGenerationCommand command = new(ClassName, ClassDescription, NamespaceSequence, HasMinimumNumber, MinimumNumber, HasMaximumNumber, MaximumNumber);

			return command;
		}

		#endregion
	}

	#endregion
}
