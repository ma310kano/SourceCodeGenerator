@page "/entity"

@using SourceCodeGeneration.Application
@using SourceCodeGeneration.Application.Command
@inject IEntityGenerationService EntityGenerationService

<h1>Entity</h1>

<EditForm Model="_model" OnValidSubmit="SubmitAsync">
	<div class="mb-3">
		<label class="form-label" for="class-name">Class name</label>
		<InputText class="form-control" id="class-name" @bind-Value="_model.ClassName" />
	</div>
	<div class="mb-3">
		<label class="form-label" for="class-description">Class description</label>
		<InputText class="form-control" id="class-description" @bind-Value="_model.ClassDescription" />
	</div>
	<div class="mb-3">
		<label class="form-label" for="namespace-sequence">Namespace sequence</label>
		<InputText class="form-control" id="namespace-sequence" @bind-Value="_model.NamespaceSequence" />
	</div>
	<div class="mb-3">
		<button type="button" class="btn btn-primary" @onclick="() => _model.Properties.Add(new PropertyModel())">Add property</button>
		<table class="table">
			<thead>
				<tr>
					<th>Property name</th>
					<th>Property description</th>
					<th>Type name</th>
					<th>Primary key</th>
					<th></th>
				</tr>
			</thead>
			<tbody>
				@foreach (PropertyModel property in _model.Properties)
				{
					<tr>
						<td><InputText class="form-control" @bind-Value="property.PropertyName" /></td>
						<td><InputText class="form-control" @bind-Value="property.PropertyDescription" /></td>
						<td><InputText class="form-control" @bind-Value="property.TypeName" /></td>
						<td><InputCheckbox class="form-check-input" @bind-Value="property.IsPrimaryKey" /></td>
						<td><button type="button" class="btn btn-danger" @onclick="() => _model.Properties.Remove(property)">Remove property</button></td>
					</tr>
				}
			</tbody>
		</table>
	</div>
	<div class="right">
		<button type="submit" class="btn btn-primary">Save</button>
	</div>
</EditForm>

@code {
	#region Fields

	/// <summary>
	/// モデル
	/// </summary>
	private readonly ClassModel _model = new();

	#endregion

	#region Methods

	/// <summary>
	/// 送信します。
	/// </summary>
	/// <returns>非同期操作を返します。</returns>
	private async Task SubmitAsync()
	{
		EntityGenerationCommand command = _model.CreateCommand();

		using Stream stream = await EntityGenerationService.GenerateEntityAsync(command);

		string fileName = command.ClassName + ".cs";

		await FileSaver.Default.SaveAsync(fileName, stream);
	}

	#endregion

	#region Nested types

	/// <summary>
	/// クラスモデル
	/// </summary>
	private class ClassModel
	{
		#region Properties

		/// <summary>
		/// クラス名を設定または取得します。
		/// </summary>
		public string ClassName { get; set; } = string.Empty;

		/// <summary>
		/// クラスの説明を設定または取得します。
		/// </summary>
		public string ClassDescription { get; set; } = string.Empty;

		/// <summary>
		/// 名前空間シーケンスを設定または取得します。
		/// </summary>
		public string NamespaceSequence { get; set; } = string.Empty;

		/// <summary>
		/// プロパティのコレクションを取得します。
		/// </summary>
		public List<PropertyModel> Properties { get; } = new() { new PropertyModel() { IsPrimaryKey = true } };

		#endregion

		#region Methods

		/// <summary>
		/// コマンドを作成します。
		/// </summary>
		/// <returns>作成したコマンドを返します。</returns>
		public EntityGenerationCommand CreateCommand()
		{
			EntityGenerationCommand command;
			{
				List<EntityPropertyCommand> properties = Properties.Select(x => x.CreateCommand()).ToList();

				command = new EntityGenerationCommand(ClassName, ClassDescription, NamespaceSequence, properties);
			}

			return command;
		}

		#endregion
	}

	/// <summary>
	/// プロパティモデル
	/// </summary>
	private class PropertyModel
	{
		#region Properties

		/// <summary>
		/// プロパティ名を設定または取得します。
		/// </summary>
		public string PropertyName { get; set; } = string.Empty;

		/// <summary>
		/// プロパティの説明を設定または取得します。
		/// </summary>
		public string PropertyDescription { get; set; } = string.Empty;

		/// <summary>
		/// 型名を設定または取得します。
		/// </summary>
		public string TypeName { get; set; } = string.Empty;

		/// <summary>
		/// 主キーかどうかを設定または取得します。
		/// </summary>
		public bool IsPrimaryKey { get; set; }

		#endregion

		#region Methods

		/// <summary>
		/// コマンドを作成します。
		/// </summary>
		/// <returns>作成したコマンドを返します。</returns>
		public EntityPropertyCommand CreateCommand()
		{
			EntityPropertyCommand command = new(PropertyName, PropertyDescription, TypeName, IsPrimaryKey);

			return command;
		}

		#endregion
	}

	#endregion
}
